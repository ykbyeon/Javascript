
USE ODIS_DB;


SHOW TABLES;
		
		
CREATE TABLE DTB_JOB_MST
(
  JOB_ID   VARCHAR(36)   NOT NULL,
  JOB_NAME VARCHAR(128)  NOT NULL,
  JOB_DESC VARCHAR(2048) NULL    ,
  PRIMARY KEY (JOB_ID)
) COMMENT '분산_업무_기본';

INSERT INTO DTB_JOB_MST (
	JOB_ID,
	JOB_NAME, 
	JOB_DESC
) VALUES (
	'DEF_SIMPLE_SINGLE_EXEC_JOB',
	'DEF_SIMPLE_SINGLE_EXEC_JOB',
	'실행 결과를 반환하기 위한 JOB'
);


INSERT INTO DTB_JOB_MST (
	JOB_ID,
	JOB_NAME, 
	JOB_DESC
) VALUES (
	'DEF_SIMPLE_SINGLE_TASK_JOB',
	'DEF_SIMPLE_SINGLE_TASK_JOB',
	'실행과 단순한 모니터링만 수행 JOB'
);

INSERT INTO DTB_JOB_MST (
	JOB_ID,
	JOB_NAME, 
	JOB_DESC
) VALUES (
	'DEF_SIMPLE_MULTI_TASK_JOB',
	'DEF_SIMPLE_MULTI_TASK_JOB',
	'사용자가 선택한 단순 실행 - 단순한 모니터링만 수행 JOB - MULTI GROUPS, MULTI TASKS'
);




CREATE TABLE DTB_TASK_JS_MST
(
  JS_ID   VARCHAR(36)   NOT NULL,
  JS_NAME VARCHAR(128)  NOT NULL,
  JS_PATH VARCHAR(1024) NOT NULL,
  JS_KIND INT           NOT NULL DEFAULT -1 COMMENT '-1:DEF FN, 1:SYS FN, 2:USER FN',
  PRIMARY KEY (JS_ID)
) COMMENT '분산_작업_JS_기본';

INSERT INTO DTB_TASK_JS_MST (
	JS_ID,
	JS_NAME,
	JS_PATH,
	jS_KIND
) VALUES (
	'DEF_JS_MAIN_FILE',
	'DEF_JS_MAIN_FILE',
	'#core/utils/taskFn.js',
	-1
);

-- DROP TABLE dtb_task_fn_mst;

CREATE TABLE DTB_TASK_FN_MST
(
  FN_ID       VARCHAR(36)   NOT NULL,
  FN_KIND     INT           NOT NULL DEFAULT -1 COMMENT '-1:DEF FN, 1:SYS FN, 2:USER FN',
  FN_NAME     VARCHAR(256)  NOT NULL,
  FN_TYPE     INT           NOT NULL DEFAULT 1,
  DEF_CONFIGS VARCHAR(2048) NULL    ,
  JS_ID       VARCHAR(36)   NOT NULL,
  PRIMARY KEY (FN_ID)
) COMMENT '분산_작업_함수_기본';

INSERT INTO DTB_TASK_FN_MST (
  FN_ID,
  FN_KIND,
  FN_NAME,
  FN_TYPE,
  DEF_CONFIGS,
  JS_ID
) VALUES (
	'DEF_FN_EXEC_001',
	-1, 
	'execProcessByConfigs',
	1,
	'{}',
	'DEF_JS_MAIN_FILE'
);

INSERT INTO DTB_TASK_FN_MST (
  FN_ID,
  FN_KIND,
  FN_NAME,
  FN_TYPE,
  DEF_CONFIGS,
  JS_ID
) VALUES (
	'DEF_FN_BY_PASS_ANALYSIS_001',
	-1, 
	'executeByPassAnalysisFn',
	1,
	'{}',
	'DEF_JS_MAIN_FILE'
);

INSERT INTO DTB_TASK_FN_MST (
  FN_ID,
  FN_KIND,
  FN_NAME,
  FN_TYPE,
  DEF_CONFIGS,
  JS_ID
) VALUES (
	'DEF_FN_BY_PASS_MONITOR_001',
	-1, 
	'executeByPassMonitoringFn',
	1,
	'{}',
	'DEF_JS_MAIN_FILE'
);


INSERT INTO DTB_TASK_FN_MST (
  FN_ID,
  FN_KIND,
  FN_NAME,
  FN_TYPE,
  DEF_CONFIGS,
  JS_ID
) VALUES (
	'DEF_FN_FILE_ANALYSIS_001',
	-1, 
	'executeByConfigFileAnalysisFn',
	1,
	'{}',
	'DEF_JS_MAIN_FILE'
);

INSERT INTO DTB_TASK_FN_MST (
  FN_ID,
  FN_KIND,
  FN_NAME,
  FN_TYPE,
  DEF_CONFIGS,
  JS_ID
) VALUES (
	'DEF_FN_FILE_MONITOR_001',
	-1, 
	'executeFileExistsMonitoringFn',
	1,
	'{}',
	'DEF_JS_MAIN_FILE'
);


COMMIT;

SELECT *
FROM DTB_TASK_JS_MST;

SELECT *
FROM	DTB_TASK_FN_MST 
;


DROP TABLE DTB_TASK_MST;

CREATE TABLE DTB_TASK_MST
(
  TASK_ID        VARCHAR(36)   NOT NULL,
  TASK_ID_KIND   INT           NOT NULL DEFAULT 1,
  TASK_NAME      VARCHAR(128)  NOT NULL,
  TASK_DESC      VARCHAR(2048) NULL    ,
  PRIMARY KEY (TASK_ID)
) COMMENT '분산_과제_기본';



CREATE TABLE DTB_TASK_DTL
(
  TASK_ID VARCHAR(36) NOT NULL,
  FN_ID   VARCHAR(36) NOT NULL,
  FN_KIND INT         NULL     DEFAULT 1 COMMENT '1: 실행, 2: 분석, 3:모니터링',
  PRIMARY KEY (TASK_ID, FN_ID)
) COMMENT '분산_과제_상세';


INSERT INTO DTB_TASK_MST (
  TASK_ID,
  TASK_ID_KIND,
  TASK_NAME,
  TASK_DESC
) VALUES (
	'DEF_SIMPLE_TASK_001',
	1,
	'DEF_SIMPLE_TASK_001',
	'데이터 By Pass 를 위한 기본 TASK '
);


INSERT INTO DTB_TASK_DTL (
  TASK_ID,
  FN_ID,
  FN_KIND
) VALUES (
	'DEF_SIMPLE_TASK_001',
	'DEF_FN_EXEC_001',
	1
);

INSERT INTO DTB_TASK_DTL (
  TASK_ID,
  FN_ID,
  FN_KIND
) VALUES (
	'DEF_SIMPLE_TASK_001',
	'DEF_FN_BY_PASS_ANALYSIS_001',
	2
);

INSERT INTO DTB_TASK_DTL (
  TASK_ID,
  FN_ID,
  FN_KIND
) VALUES (
	'DEF_SIMPLE_TASK_001',
	'DEF_FN_BY_PASS_MONITOR_001', 
	3
);


INSERT INTO DTB_TASK_MST (
  TASK_ID,
  TASK_ID_KIND,
  TASK_NAME,
  TASK_DESC
) VALUES (
	'DEF_FILE_TASK_001',
	1,
	'DEF_FILE_TASK_001',
	'데이터 파일 모니터링를 위한 기본 TASK '
);

INSERT INTO DTB_TASK_DTL (
  TASK_ID,
  FN_ID,
  FN_KIND
) VALUES (
	'DEF_FILE_TASK_001',
	'DEF_FN_EXEC_001',
	1
);

INSERT INTO DTB_TASK_DTL (
  TASK_ID,
  FN_ID,
  FN_KIND
) VALUES (
	'DEF_FILE_TASK_001',
	'DEF_FN_FILE_ANALYSIS_001',
	2
);

INSERT INTO DTB_TASK_DTL (
  TASK_ID,
  FN_ID,
  FN_KIND
) VALUES (
	'DEF_FILE_TASK_001',
	'DEF_FN_FILE_MONITOR_001', 
	3
);

COMMIT;


SELECT	A.*, B.FN_ID, B.FN_KIND, C.FN_NAME, C.FN_TYPE, C.JS_ID, D.JS_NAME, D.JS_PATH, D.JS_KIND
FROM	DTB_TASK_MST A
INNER JOIN DTB_TASK_DTL B
ON A.TASK_ID=B.TASK_ID
INNER JOIN dtb_task_fn_mst C
ON B.FN_ID = C.FN_ID
INNER JOIN dtb_task_js_mst d
ON c.JS_ID=d.JS_ID
ORDER BY A.TASK_ID, B.FN_KIND
;


CREATE TABLE DTB_TASK_GROUP_MST
(
  TASK_GROUP_ID   VARCHAR(36)   NOT NULL,
  TASK_GROUP_NAME VARCHAR(128)  NOT NULL,
  TASK_GROUP_DESC VARCHAR(2048) NULL    ,
  TASK_GROUP_KIND INT           NULL     DEFAULT 1,
  PRIMARY KEY (TASK_GROUP_ID)
) COMMENT '분산_과제_그룹_기본';

INSERT INTO DTB_TASK_GROUP_MST (
  TASK_GROUP_ID,
  TASK_GROUP_NAME,
  TASK_GROUP_DESC,
  TASK_GROUP_KIND
) VALUES (
	'DEF_SIMPLE_TASK_GROUP_001',
	'DEF_SIMPLE_TASK_GROUP_001',
	'데이터 By Pass 를 위한 기본 TASK GROUP',
	1
);


SELECT *
FROM DTB_TASK_GROUP_MST 
;


CREATE TABLE DTB_TASK_GROUP_DTL
(
  TASK_GROUP_ID   VARCHAR(36)   NOT NULL,
  TASK_UNIT_ID    VARCHAR(36)   NOT NULL,
  TASK_ID         VARCHAR(36)   NOT NULL,
  TASK_ORDER      INT           NOT NULL,
  TASK_GROUP_DESC VARCHAR(2048) NULL    ,
  PRIMARY KEY (TASK_GROUP_ID, TASK_UNIT_ID)
) COMMENT '분산_과제_그룹_상세';


INSERT INTO DTB_TASK_GROUP_DTL (
  TASK_GROUP_ID,
  TASK_UNIT_ID,
  TASK_ID,
  TASK_ORDER,
  TASK_GROUP_DESC
) VALUES (
	'DEF_SIMPLE_TASK_GROUP_001',
	'DEF_SIMPLE_TASK_UNIT_001',
	'DEF_SIMPLE_TASK_001',
	1,
	'기본 JOB 수행을 위한 최소 단위 구성 그룹'
);



SELECT *
FROM 	DTB_TASK_GROUP_DTL
;


CREATE TABLE DTB_JOB_ORDER_DTL
(
  JOB_ID           VARCHAR(36) NOT NULL,
  TASK_GROUP_ID    VARCHAR(36) NOT NULL,
  TASK_GROUP_ORDER INT         NOT NULL,
  PRIMARY KEY (JOB_ID, TASK_GROUP_ID)
) COMMENT '분산_업무_순서_상세';


INSERT INTO DTB_JOB_ORDER_DTL (
  JOB_ID,
  TASK_GROUP_ID,
  TASK_GROUP_ORDER
) VALUES ( 
	'DEF_SIMPLE_SINGLE_EXEC_JOB',
	'DEF_SIMPLE_TASK_GROUP_001',
	1
);

INSERT INTO DTB_JOB_ORDER_DTL (
  JOB_ID,
  TASK_GROUP_ID,
  TASK_GROUP_ORDER
) VALUES ( 
	'DEF_SIMPLE_SINGLE_TASK_JOB',
	'DEF_SIMPLE_TASK_GROUP_001',
	1
);


INSERT INTO DTB_JOB_ORDER_DTL (
  JOB_ID,
  TASK_GROUP_ID,
  TASK_GROUP_ORDER
) VALUES ( 
	'DEF_SIMPLE_MULTI_TASK_JOB',
	'DEF_SIMPLE_TASK_GROUP_001',
	1
);



SELECT *
FROM DTB_JOB_ORDER_DTL 
;

SELECT *
FROM 	dtb_job_mst
;

COMMIT;


SELECT A.*, B.FN_ID, B.FN_KIND
FROM	DTB_TASK_MST A
INNER JOIN DTB_TASK_DTL B
ON A.TASK_ID=B.TASK_ID
ORDER BY B.FN_KIND
;


SELECT *
FROM DTB_JOB_MST
;

DROP TABLE DTB_REQ_TASK_DTL;

CREATE TABLE DTB_REQ_TASK_DTL
(
  REQUEST_ID          VARCHAR(36)   NOT NULL,
  REQ_GROUP_ID        VARCHAR(36)   NOT NULL,
  REQ_TASK_ID         VARCHAR(36_   NOT NULL,
  TASK_UNIT_ID        VARCHAR(36)   NOT NULL,
  TASK_FN_ARGS        VARCHAR(2048) NOT NULL,
  TASK_STATUS         INT           NULL    ,
  TASK_SUB_STATUS     INT           NULL    ,
  TASK_STATUS_MESSAGE VARCHAR(256)  NULL    ,
  TASK_RESULT         TEXT          NULL    ,
  CREATE_DATE         DATETIME      NULL     DEFAULT now(),
  FINISHED_DATE       DATETIME      NULL     DEFAULT now(),
  PRIMARY KEY (REQUEST_ID, REQ_GROUP_ID, REQ_TASK_ID)
) COMMENT '분산_요청_과제_상세';



DROP TABLE DTB_REQ_TASK_STATUS;

CREATE TABLE DTB_REQ_TASK_STATUS
(
  REQUEST_ID    VARCHAR(36)  NOT NULL,
  REQ_GROUP_ID  VARCHAR(36)  NOT NULL,
  REQ_TASK_ID   VARCHAR(36)  NOT NULL,  
  TASK_STATUS   INT          NOT NULL,
  TASK_ANALYSIS VARCHAR(512) NULL    ,
  MODIFY_ID     VARCHAR(36)  NULL    ,
  MODIFY_DATE   DATETIME     NULL     DEFAULT now(),
  PRIMARY KEY (REQUEST_ID, REQ_GROUP_ID, REQ_TASK_ID)
) COMMENT '분산_요청_과제_상태';



SELECT	MAIN.*, B.TASK_GROUP_ID, B.TASK_GROUP_ORDER , C.TASK_GROUP_NAME, C.TASK_GROUP_KIND, D.TASK_UNIT_ID, D.TASK_ID, D.TASK_ORDER , E.TASK_NAME, E.TASK_ID_KIND
FROM	(
	SELECT *
	FROM	DTB_JOB_MST a
) MAIN INNER JOIN DTB_JOB_ORDER_DTL B
ON MAIN.JOB_ID=B.JOB_ID
INNER JOIN DTB_TASK_GROUP_MST C 
ON B.TASK_GROUP_ID=C.TASK_GROUP_ID
INNER JOIN DTB_TASK_GROUP_DTL D
ON C.TASK_GROUP_ID=D.TASK_GROUP_ID 
INNER JOIN dtb_task_mst E
ON D.TASK_ID=E.TASK_ID
ORDER BY B.TASK_GROUP_ORDER ASC, D.TASK_ORDER ASC 
;


DROP TABLE DTB_REQ_TASK_GROUP_STATUS;

CREATE TABLE DTB_REQ_TASK_GROUP_STATUS
(
  REQUEST_ID        VARCHAR(36) NOT NULL,
  REQ_GROUP_ID      VARCHAR(36) NOT NULL,
  TASK_GROUP_ID     VARCHAR(36) NOT NULL,
  TASK_GROUP_STATUS INT         NOT NULL,
  REQ_GROUP_ORDER   INT         NOT NULL DEFAULT 1,
  CREATE_DATE       DATETIME    NULL     DEFAULT now(),
  MODIFY_DATE       DATETIME    NULL     DEFAULT now(),
  PRIMARY KEY (REQUEST_ID, REQ_GROUP_ID)
) COMMENT '분산_요청_과제_그룹_상태';


CREATE TABLE DTB_REQ_JOB_MST
(
  REQUEST_ID     VARCHAR(36)  NOT NULL,
  USER_ID        VARCHAR(36)  NOT NULL,
  JOB_ID         VARCHAR(36)  NOT NULL,
  JOB_STATUS     INT          NOT NULL DEFAULT -1,
  REQUEST_TYPE   INT          NULL     DEFAULT 1 COMMENT '1: 사용자 요청 , 2 : SYSTEM 스케쥴러',
  RESPONSE_URL   VARCHAR(512) NULL    ,
  REQ_ORIGIN_URL VARCHAR(512) NULL    ,
  CREATE_ID      VARCHAR(36)  NULL    ,
  CREATE_DATE    DATETIME     NULL     DEFAULT now(),
  MODIFY_ID      VARCHAR(36)  NULL    ,
  MODIFY_DATE    DATETIME     NULL     DEFAULT now(),
  PRIMARY KEY (REQUEST_ID)
) COMMENT '분산_요청_업무_기본';


SELECT *
FROM DTB_REQ_JOB_MST
ORDER BY CREATE_DATE DESC
;

SELECT *
FROM DTB_REQ_TASK_GROUP_STATUS
WHERE REQUEST_ID='REQ_17293915167331wXHH9dEjC97JBP'
ORDER BY CREATE_DATE DESC
;

SELECT *
FROM	DTB_REQ_TASK_DTL
WHERE REQUEST_ID='REQ_17293915167331wXHH9dEjC97JBP'
ORDER BY CREATE_DATE DESC
;

SELECT *
FROM DTB_REQ_TASK_STATUS 
WHERE REQUEST_ID='REQ_17293915167331wXHH9dEjC97JBP'
ORDER BY MODIFY_DATE DESC
;

SELECT	MAIN.*, B.REQ_GROUP_ID, B.TASK_GROUP_ID, B.TASK_GROUP_STATUS, B.REQ_GROUP_ORDER, B.MODIFY_DATE AS GROUP_MODIFY_DATE
	, C.REQ_TASK_ID, C.TASK_UNIT_ID, C.TASK_STATUS, C.TASK_SUB_STATUS, C.FINISHED_DATE 
	, D.TASK_STATUS AS MONITOR_TASK_STATUS, D.TASK_ANALYSIS, D.MODIFY_DATE AS MONITOR_MODIFY_DATE
FROM	(
	SELECT	A.*
	FROM	dtb_req_job_mst A
	WHERE	REQUEST_ID='REQ_17293915167331wXHH9dEjC97JBP'
	-- WHERE	REQUEST_ID='REQ_1729399773973Pjy6lQOFUEnTSDW'
) MAIN
INNER JOIN dtb_req_task_group_status B
ON MAIN.REQUEST_ID=B.REQUEST_ID
INNER JOIN dtb_req_task_dtl C
ON B.REQUEST_ID=C.REQUEST_ID AND  B.REQ_GROUP_ID=C.REQ_GROUP_ID 
INNER JOIN dtb_req_task_status D
ON C.REQUEST_ID=D.REQUEST_ID AND C.REQ_GROUP_ID=D.REQ_GROUP_ID AND C.REQ_TASK_ID = D.REQ_TASK_ID
ORDER BY REQ_GROUP_ORDER, C.FINISHED_DATE
;


TRUNCATE TABLE DTB_REQ_JOB_MST;
TRUNCATE TABLE DTB_REQ_TASK_GROUP_STATUS;

TRUNCATE TABLE dtb_req_task_dtl;
TRUNCATE TABLE DTB_REQ_TASK_STATUS;


COMMIT;





